(set-logic QF_NRA)
(declare-fun q () Real)
(declare-fun xA () Real)
(declare-fun xB () Real)
(declare-fun yA () Real)
(declare-fun yB () Real)
(declare-fun x0 () Real)
(declare-fun m () Real)
(assert (let ((.def_0 (- 0.0 q))) (let ((.def_1 (/ .def_0 m))) (let ((.def_2 (= x0 .def_1))) (let ((.def_3 (* m xA))) (let ((.def_4 (- yA .def_3))) (let ((.def_5 (= q .def_4))) (let ((.def_6 (- xB xA))) (let ((.def_7 (- yB yA))) (let ((.def_8 (/ .def_7 .def_6))) (let ((.def_9 (= m .def_8))) (let ((.def_10 (= yB 7.0))) (let ((.def_11 (= yA 3.0))) (let ((.def_12 (= xB 2.0))) (let ((.def_13 (= xA 1.0))) (let ((.def_14 (and .def_13 .def_12 .def_11 .def_10 .def_9 .def_5 .def_2))) .def_14))))))))))))))))
(check-sat)
